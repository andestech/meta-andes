From 18f2bf743269a500f105a4fc0e4b8c063cde812e Mon Sep 17 00:00:00 2001
From: Yu Chien Peter Lin <peterlin@andestech.com>
Date: Fri, 15 Oct 2021 14:51:15 +0800
Subject: [PATCH] Add-custom-CSR

---
 arch/riscv/include/asm/andesv5/csr.h | 37 ++++++++++++++++++++++++++++
 arch/riscv/include/asm/switch_to.h   |  5 ++--
 arch/riscv/kernel/perf_event.c       | 30 +++++++++++-----------
 3 files changed, 55 insertions(+), 17 deletions(-)

diff --git a/arch/riscv/include/asm/andesv5/csr.h b/arch/riscv/include/asm/andesv5/csr.h
index 438b50dc0..43a233161 100644
--- a/arch/riscv/include/asm/andesv5/csr.h
+++ b/arch/riscv/include/asm/andesv5/csr.h
@@ -101,3 +101,40 @@
 	L2C_HPM_C0_CTL_OFFSET + (n * L2C_HPM_PER_CORE_OFFSET)
 #define L2C_REG_CN_HPM_OFFSET(n)	\
 	L2C_REG_C0_HPM_OFFSET + (n * L2C_HPM_PER_CORE_OFFSET)
+
+/**********************************
+ * AndeStar V5 supervisor mode CSRs
+ **********************************/
+
+/* Supervisor Trap Related */
+#define CSR_SLIE            0x9c4
+#define CSR_SLIP            0x9c5
+#define CSR_SDCAUSE         0x9c9
+
+/* Supervisor Counter Related */
+#define CSR_SCOUNTERINTEN   0x9cf
+#define CSR_SCOUNTERMASK_M  0x9d1
+#define CSR_SCOUNTERMASK_S  0x9d2
+#define CSR_SCOUNTERMASK_U  0x9d3
+#define CSR_SCOUNTEROVF     0x9d4
+#define CSR_SCOUNTINHIBIT   0x9e0
+#define CSR_SHPMEVENT3      0x9e3
+#define CSR_SHPMEVENT4      0x9e4
+#define CSR_SHPMEVENT5      0x9e5
+#define CSR_SHPMEVENT6      0x9e6
+
+/* Supervisor Control */
+#define CSR_SCCTLDATA       0x9cd
+#define CSR_SMISC_CTL       0x9d0
+
+/***********************************
+ * AndeStar V5 user mode CSRs
+ **********************************/
+#define CSR_UITB            0x800
+#define CSR_UCODE           0x801
+#define CSR_UDCAUSE         0x809
+#define CSR_UCCTLBEGINADDR  0x80b
+#define CSR_UCCTLCOMMAND    0x80c
+#define CSR_WFE             0x810
+#define CSR_SLEEPVALUE      0x811
+#define CSR_TXEVT           0x812
diff --git a/arch/riscv/include/asm/switch_to.h b/arch/riscv/include/asm/switch_to.h
index 66a833133..b142f8426 100644
--- a/arch/riscv/include/asm/switch_to.h
+++ b/arch/riscv/include/asm/switch_to.h
@@ -10,6 +10,7 @@
 #include <asm/processor.h>
 #include <asm/ptrace.h>
 #include <asm/csr.h>
+#include <asm/andesv5/csr.h>
 
 #ifdef CONFIG_FPU
 extern void __fstate_save(struct task_struct *save_to);
@@ -54,11 +55,11 @@ extern bool has_fpu;
 #ifdef CONFIG_DSP
 static inline void dspstate_save(struct task_struct *task)
 {
-	task->thread.dspstate.ucode = csr_read(ucode);
+	task->thread.dspstate.ucode = csr_read(CSR_UCODE);
 }
 static inline void dspstate_restore(struct task_struct *task)
 {
-	csr_write(ucode, task->thread.dspstate.ucode);
+	csr_write(CSR_UCODE, task->thread.dspstate.ucode);
 }
 extern bool has_dsp;
 #else
diff --git a/arch/riscv/kernel/perf_event.c b/arch/riscv/kernel/perf_event.c
index 22cc98a8a..fe2013f44 100644
--- a/arch/riscv/kernel/perf_event.c
+++ b/arch/riscv/kernel/perf_event.c
@@ -409,28 +409,28 @@ void riscv_pmu_disable_counter(int idx)
 {
         u32 val = 1UL << idx;
 
-        csr_set(scountinhibit, val);
+        csr_set(CSR_SCOUNTINHIBIT, val);
 }
 
 void riscv_pmu_enable_counter(int idx)
 {
         u32 val = 1UL << idx;
 
-        csr_clear(scountinhibit, val);
+        csr_clear(CSR_SCOUNTINHIBIT, val);
 }
 
 void riscv_pmu_disable_interrupt(int idx)
 {
         u32 val = 1UL << idx;
 
-        csr_clear(scounterinten, val);
+        csr_clear(CSR_SCOUNTERINTEN, val);
 }
 
 void riscv_pmu_enable_interrupt(int idx)
 {
         u32 val = 1UL << idx;
 
-        csr_set(scounterinten, val);
+        csr_set(CSR_SCOUNTERINTEN, val);
 }
 
 static inline void riscv_pmu_disable_event(struct perf_event *event)
@@ -451,13 +451,13 @@ static inline void riscv_pmu_disable_event(struct perf_event *event)
 static inline void riscv_pmu_disable(void)
 {
         // Disable all counter
-        csr_set(scountinhibit, 0xfffffffd);
+        csr_set(CSR_SCOUNTINHIBIT, 0xfffffffd);
 }
 
 static inline void riscv_pmu_enable(struct perf_event *event)
 {
         // Enable all counter
-	csr_clear(scountinhibit, 0xfffffffd);
+	csr_clear(CSR_SCOUNTINHIBIT, 0xfffffffd);
 }
 
 static int riscv_event_set_period(struct perf_event *event)
@@ -508,11 +508,11 @@ static inline void riscv_pmu_event_enable(struct perf_event *event)
                 return;
 
         if(hwc->config & MMODE_MASK)
-                csr_set(scountermask_m, value);
+                csr_set(CSR_SCOUNTERMASK_M, value);
         if(hwc->config & SMODE_MASK)
-                csr_set(scountermask_s, value);
+                csr_set(CSR_SCOUNTERMASK_S, value);
         if(hwc->config & UMODE_MASK)
-                csr_set(scountermask_u, value);
+                csr_set(CSR_SCOUNTERMASK_U, value);
 
         if (idx < BASE_COUNTERS)
                 return;
@@ -594,9 +594,9 @@ static void riscv_pmu_stop(struct perf_event *event, int flags)
 
 	// disable all mask
 	if (cpuc->n_events == 0) {
-		csr_write(scountermask_m, 0);
-		csr_write(scountermask_s, 0);
-		csr_write(scountermask_u, 0);
+		csr_write(CSR_SCOUNTERMASK_M, 0);
+		csr_write(CSR_SCOUNTERMASK_S, 0);
+		csr_write(CSR_SCOUNTERMASK_U, 0);
 	}
 	return;
 l2c_event_stop:
@@ -769,12 +769,12 @@ static DEFINE_MUTEX(pmc_reserve_mutex);
 
 unsigned long riscv_pmu_get_overflow(void)
 {
-        return csr_read(scounterovf);
+        return csr_read(CSR_SCOUNTEROVF);
 }
 
 void riscv_reset_overflow(unsigned long status)
 {
-        csr_write(scounterovf ,status);
+        csr_write(CSR_SCOUNTEROVF ,status);
 }
 
 static atomic_t riscv_active_events = ATOMIC_INIT(0);
@@ -1004,7 +1004,7 @@ static const struct of_device_id riscv_pmu_of_ids[] = {
 void init_cpu_pmu(void *arg)
 {
 	// enable S-mode local interrupt and M-mode interrupt
-	csr_write(slie, PFMOVF_MASK);
+	csr_write(CSR_SLIE, PFMOVF_MASK);
 	sbi_ecall(SBI_EXT_ANDES, SBI_EXT_ANDES_SET_PFM, 0, 0, 0, 0, 0, 0);
 }
 
-- 
2.17.0

