From 7c7587775d5b86d5822777e226a6bf0bb3704bed Mon Sep 17 00:00:00 2001
From: Yu Chien Peter Lin <peterlin@andestech.com>
Date: Tue, 28 Dec 2021 16:44:26 +0800
Subject: [PATCH 07/12] riscv: Porting pte update function
 "local_flush_tlb_all"

Signed-off-by: Yu Chien Peter Lin <peterlin@andestech.com>
---
 arch/riscv/include/asm/pgtable-64.h |  1 +
 arch/riscv/include/asm/pgtable.h    | 20 ++++++++++++++++++--
 2 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/arch/riscv/include/asm/pgtable-64.h b/arch/riscv/include/asm/pgtable-64.h
index f3b0da64c6c8..69a9a87b3365 100644
--- a/arch/riscv/include/asm/pgtable-64.h
+++ b/arch/riscv/include/asm/pgtable-64.h
@@ -53,6 +53,7 @@ static inline int pud_leaf(pud_t pud)
 static inline void set_pud(pud_t *pudp, pud_t pud)
 {
	*pudp = pud;
+	local_flush_tlb_all();
 }

 static inline void pud_clear(pud_t *pudp)
diff --git a/arch/riscv/include/asm/pgtable.h b/arch/riscv/include/asm/pgtable.h
index 73e8b5e5bb65..0fa3fc6658ed 100644
--- a/arch/riscv/include/asm/pgtable.h
+++ b/arch/riscv/include/asm/pgtable.h
@@ -7,7 +7,6 @@
 #define _ASM_RISCV_PGTABLE_H

 #include <linux/mmzone.h>
-#include <linux/sizes.h>

 #include <asm/pgtable-bits.h>

@@ -18,6 +17,7 @@
 #include <asm/page.h>
 #include <asm/tlbflush.h>
 #include <linux/mm_types.h>
+#include <linux/sizes.h>

 #ifdef CONFIG_MMU

@@ -99,6 +99,7 @@
				| _PAGE_DIRTY)

 #define PAGE_KERNEL		__pgprot(_PAGE_KERNEL)
+#define PAGE_KERNEL_EXEC	__pgprot(_PAGE_KERNEL | _PAGE_EXEC)
 #define PAGE_KERNEL_READ	__pgprot(_PAGE_KERNEL & ~_PAGE_WRITE)
 #define PAGE_KERNEL_EXEC	__pgprot(_PAGE_KERNEL | _PAGE_EXEC)
 #define PAGE_KERNEL_READ_EXEC	__pgprot((_PAGE_KERNEL & ~_PAGE_WRITE) \
@@ -134,6 +135,12 @@ extern pgd_t swapper_pg_dir[];
 #define __S110	PAGE_SHARED_EXEC
 #define __S111	PAGE_SHARED_EXEC

+#define pgprot_noncached pgprot_noncached
+static inline pgprot_t pgprot_noncached(pgprot_t _prot)
+{
+       return __pgprot(pgprot_val(_prot) | _PAGE_NONCACHEABLE);
+}
+
 static inline int pmd_present(pmd_t pmd)
 {
	return (pmd_val(pmd) & (_PAGE_PRESENT | _PAGE_PROT_NONE));
@@ -159,6 +166,7 @@ static inline int pmd_leaf(pmd_t pmd)
 static inline void set_pmd(pmd_t *pmdp, pmd_t pmd)
 {
	*pmdp = pmd;
+	local_flush_tlb_all();
 }

 static inline void pmd_clear(pmd_t *pmdp)
@@ -195,9 +203,16 @@ static inline unsigned long pte_pfn(pte_t pte)
 #define pte_page(x)     pfn_to_page(pte_pfn(x))

 /* Constructs a page table entry */
+extern phys_addr_t pa_msb;
 static inline pte_t pfn_pte(unsigned long pfn, pgprot_t prot)
 {
-	return __pte((pfn << _PAGE_PFN_SHIFT) | pgprot_val(prot));
+	pte_t ret;
+	if (pgprot_val(prot) & _PAGE_NONCACHEABLE) {
+		ret = __pte(((pfn|pa_msb) << _PAGE_PFN_SHIFT) | (pgprot_val(prot) & ~_PAGE_NONCACHEABLE));
+	} else {
+		ret = __pte((pfn << _PAGE_PFN_SHIFT) | pgprot_val(prot));
+	}
+	return ret;
 }

 #define mk_pte(page, prot)       pfn_pte(page_to_pfn(page), prot)
@@ -327,6 +342,7 @@ static inline int pte_same(pte_t pte_a, pte_t pte_b)
 static inline void set_pte(pte_t *ptep, pte_t pteval)
 {
	*ptep = pteval;
+	local_flush_tlb_all();
 }

 void flush_icache_pte(pte_t pte);
--
2.25.1

